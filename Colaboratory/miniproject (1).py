# -*- coding: utf-8 -*-
"""Miniproject

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SnDdgWSVYwxhzibKCXfNOyoOnbx9Ghlt
"""

import matplotlib.pyplot as plt
import matplotlib.image as imglib
import numpy as np
import math
!pip install -q gradio
import gradio as gr
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Perceptron
from sklearn.datasets import load_iris

forest0 = imglib.imread('/content/forest9.jpg')
beach0 = imglib.imread('/content/beach1.jpg')
city0 = imglib.imread('/content/urban0.jpg')


for_red_avg = np.mean(forest0[:,:, 0])
for_green_avg = np.mean(forest0[:,:, 1])
for_blue_avg = np.mean(forest0[:,:, 2])

bea_red_avg = np.mean(beach0[:,:, 0])
bea_green_avg = np.mean(beach0[:,:, 1])
bea_blue_avg = np.mean(beach0[:,:, 2])

cit_red_avg = np.mean(city0[:,:, 0])
cit_green_avg = np.mean(city0[:,:, 1])
cit_blue_avg = np.mean(city0[:,:, 2])

df = pd.DataFrame(columns = ['Red','Green','Blue', 'Type'])
for img_type in ['city', 'forest']:
  for i in range(10):
    img = imglib.imread('/content/'+img_type+str(i) + '.jpg')
    df = df.append({'Red': img[:,:,0].mean(),'Green':img[:,:,1].mean() ,'Blue':img[:,:,2].mean() , 'Type': img_type},ignore_index = True)
df

data = df.to_numpy()
x = data[:,2].reshape(-1,1)
print("X = ",x)
y = data[:, 3].reshape(-1,1)
print("Y = ",y)

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

perceptron = Perceptron(max_iter=100, eta0=0.01, random_state=42)
perceptron.fit(X_train, y_train)

def cal (input_img):
  avg = np.array(np.mean(input_img[:,:, 2]).reshape(1,1))
  print(avg)
  return perceptron.predict(avg)

demo = gr.Interface(cal, gr.Image(), outputs="text")
demo.launch(debug=True)

"""הלמטה

"""

from sklearn.metrics import precision_score, recall_score
y_true = y_train
y_pred = cal
precision = precision_score(y_true, y_pred)
print("Precision:",precision)
recall = recall_score(y_true, y_pred)
print("Recall:",recall)

df = pd.DataFrame(columns = ['Image', 'Type'])
for img_type in ['city', 'forest']:
  for i in range(10):
    img = imglib.imread('/content/'+img_type+str(i) + '.jpg')
    df = df.append({'Image': img, 'Type': img_type},ignore_index = True)
df

X, y = data.data[:100, :], data.target[:100]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

def cal (input_img, w, b):
  img_data = np.array(input_img)
  output = np.dot(input_data, w) + b
  predicition = np.where(output >= 0,1,0)
  return prediction[0]